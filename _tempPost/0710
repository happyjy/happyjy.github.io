# scroll percentata

function hasScrolled() {
		var st = $(this).scrollTop();
		$('.walking_layer').css('left', ((st / (scHeight - winHeight - 100)) * 100)+'%');
		if(((st / (scHeight - winHeight)) * 100) <= 0) {
			$('.walking_layer').css('left', '-100px');
		}
		if (st > lastScrollTop){
			// Scroll Down
			$('.walking_layer').removeClass('flip');
		} else {
			// Scroll Up
			$('.walking_layer').addClass('flip');
		}
		lastScrollTop = st;
	}
  
  
  <!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <button>0</button>
    <br />
    <button>1</button>
    <br />
    <button>2</button>

    <script>
        var buttons = document.getElementsByTagName("button");

        // 1.console에 i의 마지막 숫자만 찍힘
        // 2 console에 i가 순차적으로 찍힌다.

        // 1.console에 i의 마지막 숫자만 찍힘
        // let's create 3 functions
        // for (var i = 0; i < buttons.length; i++) {
        //     // as event listeners
        //     buttons[i].addEventListener("click", function () {
        //         // each should log its value.
        //         console.log("My value: " + i);
        //     });
        // }

        for (var i = 0; i < buttons.length; i++) {
            buttons[i].addEventListener("click", clickEventCallbackFunction(i));
        }

        function clickEventCallbackFunction(i) {
            return function () {
                //2 console에 i가 순차적으로 찍힌다.
                console.log("My value: " + i);
            }
        }

    </script>
</body>

</html>
  
  
  
  
  
  
  
  
  
  
  
  
  ---
  
  
//IIFE에서 SCOPE 영역에서 변수는 유지 될것이가? 
// 유지 된다.
(function () {
    //closure
    let valueObj = {};
    console.log("In IIFE: ", this);

    this.layer = {
        setValue: (key, value) => {
            //valueObj: closure
            if (!valueObj[key]) {
                valueObj[key] = value;
            }
        },

        getValue: () => {
            return valueObj;
        },
    }

})();

this.layer.setValue("b", 'B');
this.layer.setValue("c", 'C');
this.layer.getValue();
//{b: "B", c: "C"}


---

/*
    # 보는순서 
    1.console에 i의 마지막 숫자만 찍힘
    2 console에 i가 순차적으로 찍힌다.
 */


// 1.console에 i의 마지막 숫자만 찍힘
var funcs = [];
// let's create 3 functions
for (var i = 0; i < 3; i++) {
    // and store them in funcs
    funcs[i] = function () {
        // each should log its value.
        console.log("My value: " + i);
    };
}
for (var j = 0; j < 3; j++) {
    // and now let's run each one to see
    funcs[j]();
}

// 2 console에 i가 순차적으로 찍힌다.
var funcs = [];

function createfunc(i) {
    return function () {
        console.log("My value: " + i);
    };
}

for (var i = 0; i < 3; i++) {
    funcs[i] = createfunc(i);
}

for (var j = 0; j < 3; j++) {
    // and now let's run each one to see
    funcs[j]();
}


---





# --------------------------------

# 

## keys, values, entries and fromEntries

```js
const object1 = {
  a: 'somestring',
  b: 42,
  c: false
};

Object.keys(object1);	//(3) ["a", "b", "c"]
Object.values(object1);	//(3) ["somestring", 42, false]
Object.entries(object1);
/*
0: (2) ["a", "somestring"]
1: (2) ["b", 42]
2: (2) ["c", false]
*/

var arr = [["a", "somestring"],["b", 42],["c", false]];
Object.fromEntries(arr); //{a: "somestring", b: 42, c: false}

```



## for in, for of

> [`for in`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loops over enumerable property names of an object.
>
> [`for of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) (new in ES6) does use an [object-specific *iterator*](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) and loops over the values generated by that.

### for in 

```
for (variable in object)
  statement
```

```js
const object = { a: 1, b: 2, c: 3 };

for (const property in object) {
  console.log(`${property}: ${object[property]}`);
}

// expected output:
// "a: 1"
// "b: 2"
// "c: 3"
```



###  for of 

```text
for (variable of iterable) {
  statement
}

# variable
	On each iteration a value of a different property is assigned to variable. variable may be declared with const, let, or var.

# iterable
	Object whose iterable properties are iterated.
```

```js
const array1 = ['a', 'b', 'c'];

for (const element of array1) {
  console.log(element);
}

// expected output: "a"
// expected output: "b"
// expected output: "c"

```

### 만약 array를 for in을 사용하면 ?

> 배열의 property를 가르킨다.

```js
0
1
2
//여기까지 배열 요소 index
---
//배열 __proto__의 perperty
count
all
any
average
min
max
sum
sumToDecimal
contains
distinct
except
intersect
union
trim
select
where
first
head
last
element
skip
take
uniq
invoke
pluck
grep
groupBy
sortBy
toArray
add
addif
addifUnique
append
insert
remove
replace
flatten
clear
clone
toJSON
```

