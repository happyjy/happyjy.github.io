{"componentChunkName":"component---src-templates-post-list-js","path":"/page/7","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"6868f4c7-b6be-590c-a52b-ee8c302a5229","frontmatter":{"title":"StructuralPattern_04.Decorator","date":"October 11th 2020","author":"jyoon","tags":["Decorator","DesignPattern","StructuralPattern","JavaScript"],"category":"DesignPattern","image":null},"fields":{"slug":"structuralpattern-04decorator"},"excerpt":"def Decorator pattern은 객체의 행동을 드라마틱하게 확장시키는 것이다. runtime에 새로운 행동을 추가하는 능력은 Decorator객체가 기존 객체를 감싸면서 해낼 수 있다. 여러개의 decorator…"}},{"node":{"id":"be493c6f-05a2-5114-bd42-3822e5034450","frontmatter":{"title":"StructuralPattern_01.Adapter","date":"October 11th 2020","author":"jyoon","tags":["Adapter","DesignPattern","StructuralPattern","JavaScript"],"category":"DesignPattern","image":null},"fields":{"slug":"structuralpattern-01adapter"},"excerpt":"def   POINTinterface…"}},{"node":{"id":"b28a557c-412b-5b51-acd3-a6d4e74741bc","frontmatter":{"title":"StructuralPattern_03.Composite","date":"October 11th 2020","author":"jyoon","tags":["Composite","DesignPattern","StructuralPattern","JavaScript"],"category":"DesignPattern","image":null},"fields":{"slug":"structuralpattern-03composite"},"excerpt":"def collection의 각 item들은 다른 collection을 nested 구조로 가질 수 있다.    트리 구조 는 Composite pattern의 완벽한 예다. 트리의 각 노드는 leaf node subtree of node…"}},{"node":{"id":"38f6c92e-c7e9-54ca-be80-6acdc6a4d888","frontmatter":{"title":"StructuralPattern_02.Bridge","date":"October 11th 2020","author":"jyoon","tags":["Bridge","DesignPattern","StructuralPattern","JavaScript"],"category":"DesignPattern","image":null},"fields":{"slug":"structuralpattern-02bridge"},"excerpt":"def 두 컴포넌트들을 사용한다 두 컴포넌트가 각각 자신의 인터페이스를 가지고 있고 서로를 위해서 역할을 한다. a client, a service Bridege는 high-level 아키택쳐 패턴이다. POINT…"}},{"node":{"id":"44531d98-c6a6-565f-a7b0-c96f672684e7","frontmatter":{"title":"StructuralPattern_06.Flywight","date":"October 11th 2020","author":"jyoon","tags":["Flywight","DesignPattern","StructuralPattern","JavaScript"],"category":"DesignPattern","image":null},"fields":{"slug":"structuralpattern-06flywight"},"excerpt":"def Flyweight 패턴은 많은 수의 세분화 된 객체를 효율적으로 공유하여 메모리를 절약한다. 공유된 flyweight객체는 변경할 수 없다. 즉, 다른 객체와 공유되는 특성을 나타내므로 변경할 수 없다. 본질적으로 Flyweight…"}}]}},"pageContext":{"limit":5,"skip":30,"currentPage":7,"numberOfPages":32}},"staticQueryHashes":["3542266321","3649515864"]}