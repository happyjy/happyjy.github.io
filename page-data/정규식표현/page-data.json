{"componentChunkName":"component---src-templates-single-post-js","path":"/정규식표현","result":{"data":{"markdownRemark":{"id":"62079473-75b3-57f7-b293-cda01f524b74","html":"<h1 id=\"정규식-표현-기본\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EA%B7%9C%EC%8B%9D-%ED%91%9C%ED%98%84-%EA%B8%B0%EB%B3%B8\" aria-label=\"정규식 표현 기본 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정규식 표현 기본</h1>\n<ul>\n<li>\n<p>Letters</p>\n<ul>\n<li>입력과 같은 문자열 반환</li>\n</ul>\n</li>\n<li>\n<p>Digits</p>\n<ul>\n<li>입력한 숫자자와 같은 숫자 반환</li>\n</ul>\n</li>\n<li>\n<p>/d</p>\n<ul>\n<li>문자열중 첫번째 숫자 하나만 </li>\n</ul>\n</li>\n<li>\n<p>/D</p>\n<ul>\n<li>문자열중 숫자가 아닌 첫번째 문자</li>\n</ul>\n</li>\n<li>\n<p>. </p>\n<ul>\n<li>문자열중 어떤 문자열이던 첫번째 문자열</li>\n<li>/d. 이면 숫자 다음 첫번째 문자열 하나까지 </li>\n</ul>\n</li>\n<li>\n<p>.</p>\n<ul>\n<li>문자열에서 dot 선택하고 싶을때</li>\n</ul>\n</li>\n<li>\n<p>[abc]</p>\n<ul>\n<li>문자열에서 a, b, c가 있는 문자열</li>\n<li>abc문자열에서는 a만 반환</li>\n<li>zbc문자열에서는 b만 반환</li>\n</ul>\n</li>\n<li>\n<p><sup id=\"fnref-abc\"><a href=\"#fn-abc\" class=\"footnote-ref\">abc</a></sup></p>\n<ul>\n<li>문자열에서 a, b, c가 없는 문자열</li>\n</ul>\n</li>\n<li>\n<p>[a-z]</p>\n<ul>\n<li>문자열에서 괄호안에 입력되는 문자</li>\n<li>\n<p>예</p>\n<blockquote>\n<p>[A-C][n-p][a-c]</p>\n</blockquote>\n</li>\n<li>첫번째 문자는 [A-C]</li>\n<li>두번째 문자는 [n-p]</li>\n<li>세번째 문자는 [a-c]</li>\n</ul>\n</li>\n<li>\n<p>[0-9]</p>\n<ul>\n<li>문자열에서 괄호안에 입력되는 숫자</li>\n</ul>\n</li>\n<li>\n<p>\\w</p>\n<ul>\n<li>알파벳 문자</li>\n</ul>\n</li>\n<li>\n<p>\\W</p>\n<ul>\n<li>알파벳 문자가 아닌것</li>\n</ul>\n</li>\n<li>\n<p>{m}</p>\n<ul>\n<li>m번 반복</li>\n</ul>\n</li>\n<li>\n<p>{m, n}</p>\n<ul>\n<li>m ~ n 번 반복</li>\n</ul>\n</li>\n<li>\n<p>*</p>\n<ul>\n<li>0번 또는 그 이상 매칭 되는 문자열 </li>\n</ul>\n</li>\n<li>\n<p>+</p>\n<ul>\n<li>한번 또는 그 이상 매칭 되는 문자열</li>\n</ul>\n</li>\n<li>\n<p>?</p>\n<ul>\n<li>optional character</li>\n</ul>\n</li>\n<li>\n<p>/s</p>\n<ul>\n<li>공백</li>\n</ul>\n</li>\n<li>\n<p>/S</p>\n<ul>\n<li>공백이 아닌 문자열</li>\n</ul>\n</li>\n<li>\n<p>^...$</p>\n<ul>\n<li>^ 문자열의 시작</li>\n<li>$ 문자열의 끝</li>\n</ul>\n</li>\n<li>\n<p>(...)</p>\n<ul>\n<li>capture group</li>\n<li>예</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//파일명전체, 파일명(확장자제외) 두개 반환</span>\n<span class=\"token string\">\"file_record_transcript.pdf\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/^(file.+)\\.pdf$/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//(2) [\"file_record_transcript.pdf\", \"file_record_transcript\", index: 0, input: \"file_record_transcript.pdf\", groups: undefined]</span>\n\n<span class=\"token comment\">//파일명전체 한번 반환</span>\n<span class=\"token string\">\"file_record_transcript.pdf\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/^file.+\\.pdf$/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//[\"file_record_transcript.pdf\", index: 0, input: \"file_record_transcript.pdf\", groups: undefined]</span>\n\n<span class=\"token comment\">//파일명전체 두번반환</span>\n<span class=\"token string\">\"file_record_transcript.pdf\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/^(file.+\\.pdf)$/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//(2) [\"file_record_transcript.pdf\", \"file_record_transcript.pdf\", index: 0, input: \"file_record_transcript.pdf\", groups: undefined]</span></code></pre></div>\n</li>\n<li>\n<p>(a(bc))</p>\n<ul>\n<li>captrue Group</li>\n<li>예</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"Jan 1987\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/(\\w+ (\\d+))/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//(3) [\"Jan 1987\", \"Jan 1987\", \"1987\", index: 0, input: \"Jan 1987\", groups: undefined]0: \"Jan 1987\"1: \"Jan 1987\"2: \"1987\"groups: undefinedindex: 0input: \"Jan 1987\"length: 3__proto__: Array(0)</span></code></pre></div>\n</li>\n<li>\n<p>(.*)</p>\n<ul>\n<li>Captrue all</li>\n<li>예</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"1280x720\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/(\\d+)x(\\d+)/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//(3) [\"1280x720\", \"1280\", \"720\", index: 0, input: \"1280x720\", groups: undefined]</span></code></pre></div>\n</li>\n<li>\n<p>(abc|def)</p>\n<ul>\n<li>all condition</li>\n<li>괄요한 문자열이 포함된 단어 모두 반환</li>\n<li>\n<p>예</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"I love cats\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/I love (cats|dogs)/</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//(2) [\"I love cats\", \"cats\", index: 0, input: \"I love cats\", groups: undefined]</span></code></pre></div>\n</li>\n</ul>\n<p>\"I love dogs\".match(/I love (cats|dogs)/)\n//(2) [\"I love dogs\", \"dogs\", index: 0, input: \"I love dogs\", groups: undefined]</p>\n<p>\"I love cats\".match(/(cats|dogs)/)\n//(2) [\"cats\", \"cats\", index: 7, input: \"I love cats\", groups: undefined]</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n</li>\n</ul>\n<h1 id=\"match\" style=\"position:relative;\"><a href=\"#match\" aria-label=\"match permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>match</h1>\n<ul>\n<li>\n<p>syntax </p>\n<blockquote>\n<p>string.match(regExp)</p>\n</blockquote>\n</li>\n<li>\n<p>return </p>\n<blockquote>\n<p>정규식에 맞는 value가 배열에 담겨 반환된다.\n값이 없으면 Null 반환</p>\n</blockquote>\n</li>\n<li>예</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/(\\D*)(\\d*)/i</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"img10\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// A = (3) [\"img10\", \"img\", \"10\", index: 0, input: \"img10.png\", groups: undefined], a = \"img10.png\"</span></code></pre></div>\n<h1 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h1>\n<p><a href=\"https://regexone.com/lesson/introduction_abcs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RegexOne</a></p>","frontmatter":{"title":"정규식표현","author":null,"date":"Jun 7th 2020","tags":["정규식","regular expression"],"category":"Javascript","image":null}},"file":null},"pageContext":{"slug":"정규식표현","tableOfContents":"<ul>\n<li><a href=\"/%EC%A0%95%EA%B7%9C%EC%8B%9D%ED%91%9C%ED%98%84/#%EC%A0%95%EA%B7%9C%EC%8B%9D-%ED%91%9C%ED%98%84-%EA%B8%B0%EB%B3%B8\">정규식 표현 기본</a></li>\n<li><a href=\"/%EC%A0%95%EA%B7%9C%EC%8B%9D%ED%91%9C%ED%98%84/#match\">match</a></li>\n<li><a href=\"/%EC%A0%95%EA%B7%9C%EC%8B%9D%ED%91%9C%ED%98%84/#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>","imageUrl":""}}}